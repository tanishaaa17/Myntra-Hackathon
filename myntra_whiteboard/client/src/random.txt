I am giving you my project files with directory structure:

src/assets/index.js:

import text from "./ai.png";
import fileIcon from "./file.png";
import swatch from "./swatch.png";

import logoShirt from "./logo-tshirt.png";
import stylishShirt from "./stylish-tshirt.png";

export { text, fileIcon, swatch, logoShirt, stylishShirt };


src/canvas/Backdrop.jsx:

import React, { useRef } from "react";
import { easing } from "maath";
import { useSnapshot } from "valtio";
import { useFrame } from "@react-three/fiber";
import { AccumulativeShadows, RandomizedLight } from "@react-three/drei";
import state from "../store";

const Backdrop = () => {
  const snap = useSnapshot(state);
  const shadows = useRef();
  return (
    <AccumulativeShadows
      ref={shadows}
      temporal
      frames={60}
      alphaTest={0.85} //transparency
      scale={10}
      rotation={[Math.PI / 2, 0, 0]}
      position={[0, 0, -0.14]}
    >
      <RandomizedLight
        amount={4}
        radius={9}
        intensity={0.55}
        ambient={0.25}
        position={[5, 5, -10]}
      />
      <RandomizedLight
        amount={4}
        radius={5}
        intensity={0.25}
        ambient={0.55}
        position={[-5, 5, -9]}
      />
    </AccumulativeShadows>
  );
};

export default Backdrop;


src/canvas/CameraRig.jsx:

import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { easing } from "maath";
import { useSnapshot } from "valtio";

import state from "../store";

const CameraRig = ({ children }) => {
  const group = useRef();
  const snap = useSnapshot(state);

  useFrame((state, delta) => {
    const isBreakPoint = window.innerWidth <= 1280;
    const isMobileWidth = window.innerWidth <= 768;

    //set the initial state of the model object
    let targetPosition = [-0.4, 0, 2];

    if (snap.intro) {
      if (isBreakPoint) {
        targetPosition = [0, 0, 2];
      }
      if (isMobileWidth) {
        targetPosition = [0, 0.2, 2.5];
      }
    } else {
      //else here means we are on customizer page.
      if (isMobileWidth) {
        targetPosition = [0, 0, 2.5];
      } else {
        targetPosition = [0, 0, 2];
      }
    }

    //set modal camera position
    easing.damp3(state.camera.position, targetPosition, 0.25, delta);

    //set the modal rotation smoothly
    easing.dampE(
      group.current.rotation,
      [-state.pointer.y / 8, state.pointer.x / 8, 0],
      0.25,
      delta
    );
  });
  return <group ref={group}>{children}</group>;
};

export default CameraRig;

src/canvas/CanvasComponent.jsx:
import React, { useEffect, useRef } from "react";
import { useSnapshot } from "valtio";
import state from "../store";

const CanvasComponent = () => {
  const snap = useSnapshot(state);
  const textRef = useRef();

  useEffect(() => {
    if (textRef.current) {
      textRef.current.text = snap.text;
      textRef.current.fontSize = snap.fontSize;
      textRef.current.color = snap.textColor;
    }
  }, [snap.text, snap.fontSize, snap.textColor]);

  return (
    <text ref={textRef} position={[0, 0, 0]} rotation={[0, 0, 0]}>
      {snap.text}
    </text>
  );
};

export default CanvasComponent;


src/canvas/index.jsx:

import React from "react";
import { Canvas } from "@react-three/fiber";
import { Environment, Center } from "@react-three/drei";
import Shirt from "./Shirt";
import Backdrop from "./Backdrop";
import CameraRig from "./CameraRig";
import CanvasComponent from "./CanvasComponent"; // Adjust the import path as necessary

const CanvasModel = () => {
  return (
    <Canvas
      id="3d-canvas-container"
      shadows
      camera={{ position: [0, 0, 0], fov: 25 }}
      gl={{ preserveDrawingBuffer: true }}
      className="w-full max-w-full h-full transition-all ease-in"
    >
      <ambientLight intensity={0.5} />
      <Environment preset="city" />
      <CameraRig>
        <Backdrop />
        <Center>
          <Shirt />
          <CanvasComponent />
        </Center>
      </CameraRig>
    </Canvas>
  );
};

export default CanvasModel;



src/canvas/Shirt.jsx:

import React from "react";
import { easing } from "maath";
import { useSnapshot } from "valtio";
import { useFrame } from "@react-three/fiber";
import { Decal, useGLTF, useTexture } from "@react-three/drei";

import state from "../store";

const Shirt = () => {
  const snap = useSnapshot(state);
  const { nodes, materials } = useGLTF("./shirt_baked.glb");
  const logoTexture = useTexture(snap.logoDecal);
  const fullTexture = useTexture(snap.fullDecal);

  useFrame((state, delta) => {
    easing.dampC(materials.lambert1.color, snap.color, 0.25, delta);
  });

  const stateString = JSON.stringify(snap);

  return (
    <group key={stateString}>
      {/* key me stateString esliye pass kri kyuki everytime state changes it rerenders. */}
      <mesh
        castShadow
        geometry={nodes.T_Shirt_male.geometry}
        material={materials.lambert1}
        material-roughness={1}
        dispose={null}
      >
        {snap.isFullTexture && (
          <Decal
            position={[0, 0, 0]}
            rotation={[0, 0, 0]}
            scale={1}
            map={fullTexture}
          />
        )}
        {snap.isLogoTexture && (
          <Decal
            position={[0, 0.04, 0.15]}
            rotation={[0, 0, 0]}
            scale={0.15}
            mapAnisotropy={16}
            map={logoTexture}
            depthTest={false}
            depthWrite={true}
          />
        )}
      </mesh>
    </group>
  );
};

export default Shirt;



src/components/ColorPicker.jsx:

import React from "react";
import { SketchPicker } from "react-color";
import { useSnapshot } from "valtio";
import state from "../store";

const ColorPicker = () => {
  const snap = useSnapshot(state);
  return (
    <div className="absolute left-full ml-3">
      <SketchPicker
        color={snap.color}
        disableAlpha
        presetColors={["black", "white", "red", "green", "yellow", "orange"]}
        onChange={(color) => (state.color = color.hex)}
      />
    </div>
  );
};

export default ColorPicker;


src/components/CustomButton.jsx:

 import React from "react";
import state from "../store";
import { useSnapshot } from "valtio";
import { getContrastingColor } from "../config/helpers";

const CustomButton = ({ type, title, customStyles, handleClick }) => {
  const snap = useSnapshot(state);
  function generateStyle(type) {
    if (type === "filled") {
      return {
        backgroundColor: snap.color,
        color: getContrastingColor(snap.color),
      };
    } else if (type === "outline") {
      return {
        color: "white",
        borderWidth: "1px",
        borderColor: snap.color,
        color: "black",
      };
    }
  }
  return (
    <button
      style={generateStyle(type)}
      className={`px-2 py-1.5 mt-3 flex-1 rounded-md ${customStyles}`}
      onClick={handleClick}
    >
      {title}
    </button>
  );
};

export default CustomButton;


src/components/FilePicker.jsx:

import React from "react";
import CustomButton from "./CustomButton";

const FilePicker = ({ file, setFile, readFile }) => {
  return (
    <div className="filepicker-container">
      <div className="flex flex-col flex-1">
        <input
          type="file"
          id="file-upload"
          accept="image/*"
          onChange={(e) => setFile(e.target.files[0])}
        />
        <label htmlFor="file-upload" className="filepicker-label">
          Upload File
        </label>
        <p className="mt-2 text-gray-500 text-xs truncate">
          {file === "" ? "No File Selected" : file.name}
        </p>
      </div>
      <div className="mt-4 flex flex-wrap gap-3">
        <CustomButton
          type="outline"
          title="Logo"
          handleClick={(e) => readFile("logo")}
          customStyles="text-xs"
        />
        <CustomButton
          type="filled"
          title="Full"
          handleClick={(e) => readFile("full")}
          customStyles="text-xs"
        />
      </div>
    </div>
  );
};

export default FilePicker;



src/components/index.js:

import CustomButton from "./CustomButton";
import ColorPicker from "./ColorPicker";
import FilePicker from "./FilePicker";
import Tab from "./Tab";
import TextEditor from "./TextEditor"

export {TextEditor, CustomButton, ColorPicker, FilePicker, Tab };


src/components/Loader.jsx:

import React from "react";
import "./style.scss";

const Loader = () => {
  return (
    <div aria-label="Loading..." role="status" className="loader">
      <svg className="icon" viewBox="0 0 256 256">
        <line
          x1="128"
          y1="32"
          x2="128"
          y2="64"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="195.9"
          y1="60.1"
          x2="173.3"
          y2="82.7"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="224"
          y1="128"
          x2="192"
          y2="128"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="195.9"
          y1="195.9"
          x2="173.3"
          y2="173.3"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="128"
          y1="224"
          x2="128"
          y2="192"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="60.1"
          y1="195.9"
          x2="82.7"
          y2="173.3"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="32"
          y1="128"
          x2="64"
          y2="128"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
        <line
          x1="60.1"
          y1="60.1"
          x2="82.7"
          y2="82.7"
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth="24"
        ></line>
      </svg>
      <span className="loading-text">Loading...</span>
    </div>
  );
};

export default Loader;


src/components/styles.scss:

.filtertabs-container {
  .tab-btn {
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
    transition-duration: 0.25s;
    &:hover {
      scale: 0.95;
    }
  }
}

.loader-container {
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  .loader {
    display: flex;
    align-items: center;
    .icon {
      height: 1.5rem;
      width: 1.5rem;
      animation: spin 1s linear infinite;
      stroke: black;
    }
    .loading-text {
      font-size: 0.75rem;
      line-height: 1rem;
      font-weight: 500;
      color: black;
      cursor: default;
    }
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}


src/components/Tab.jsx:
import React from "react";
import { useSnapshot } from "valtio";
import store from "../store";
import "./style.scss";

const Tab = ({ isFilterTab, isActiveTab, tab, handleClick }) => {
  const snap = useSnapshot(store);

  const activeStyle =
    isFilterTab && isActiveTab
      ? { backgroundColor: snap.color, opacity: 0.5 }
      : { backgroundColor: "transparent", opacity: 1 };
  return (
    <div
      key={tab.name}
      className={`tab-btn ${
        isFilterTab ? "rounded-full glassmorphism" : "rounded-4"
      }`}
      onClick={handleClick}
      style={activeStyle}
    >
      <img
        src={tab.icon}
        alt={tab.name}
        className={`${
          isFilterTab ? "w-2/3 h-2/3" : "w-11/12 h-11/12 object-contain"
        }`}
      />
    </div>
  );
};

export default Tab;

src/components/TextEditor.jsx:

import React, { useState } from "react";
import { useSnapshot } from "valtio";
import state from "../store";

const TextEditor = () => {
  const snap = useSnapshot(state);
  const [text, setText] = useState("");
  const [fontSize, setFontSize] = useState(16);
  const [color, setColor] = useState("#000000");

  const handleAddText = () => {
    state.text = text;
    state.fontSize = fontSize;
    state.textColor = color;
  };

  return (
    <div className="text-editor">
      <input
        type="text"
        placeholder="Enter text"
        value={text}
        onChange={(e) => setText(e.target.value)}
        className="text-input"
      />
      <input
        type="number"
        placeholder="Font size"
        value={fontSize}
        onChange={(e) => setFontSize(Number(e.target.value))}
        className="font-size-input"
      />
      <input
        type="color"
        value={color}
        onChange={(e) => setColor(e.target.value)}
        className="color-picker"
      />
      <button onClick={handleAddText} className="add-text-button">
        Add Text
      </button>
    </div>
  );
};

export default TextEditor;



src/config/config.js:

const config = {
  development: {
    backendUrl: "http://localhost:8080/api/v1/dalle",
  },
  production: {
    backendUrl: "https://devswag.onrender.com/api/v1/dalle",
  },
};

export default config;


src/config/constants.js:
import { swatch, fileIcon, logoShirt, stylishShirt, text } from "../assets";

export const EditorTabs = [
  {
    name: "colorpicker",
    icon: swatch,
  },
  {
    name: "filepicker",
    icon: fileIcon,
  },
  // Add the text editor tab
  {
    name: "texteditor",
    icon: text,
  },
];

export const FilterTabs = [
  {
    name: "logoShirt",
    icon: logoShirt,
  },
  {
    name: "stylishShirt",
    icon: stylishShirt,
  },
];

export const DecalTypes = {
  logo: {
    stateProperty: "logoDecal",
    filterTab: "logoShirt",
  },
  full: {
    stateProperty: "fullDecal",
    filterTab: "stylishShirt",
  },
};


src/config/helpers.js:

export const downloadCanvasToImage = () => {
  const canvas = document.querySelector("canvas");
  const dataURL = canvas.toDataURL();
  const link = document.createElement("a");

  link.href = dataURL;
  link.download = "canvas.png";
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const reader = (file) =>
  new Promise((resolve, reject) => {
    const fileReader = new FileReader();
    fileReader.onload = () => resolve(fileReader.result);
    fileReader.readAsDataURL(file);
  });

export const getContrastingColor = (color) => {
  // Remove the '#' character if it exists
  const hex = color.replace("#", "");

  // Convert the hex string to RGB values
  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);

  // Calculate the brightness of the color
  const brightness = (r * 299 + g * 587 + b * 114) / 1000;

  // Return black or white depending on the brightness
  return brightness > 128 ? "black" : "white";
};


src/config/motion.js:

export const transition = { type: "spring", duration: 0.8 };

export const slideAnimation = (direction) => {
  return {
    initial: {
      x: direction === "left" ? -100 : direction === "right" ? 100 : 0,
      y: direction === "up" ? 100 : direction === "down" ? -100 : 0,
      opacity: 0,
      transition: { ...transition, delay: 0.5 },
    },
    animate: {
      x: 0,
      y: 0,
      opacity: 1,
      transition: { ...transition, delay: 0 },
    },
    exit: {
      x: direction === "left" ? -100 : direction === "right" ? 100 : 0,
      y: direction === "up" ? 100 : direction === "down" ? -100 : 0,
      transition: { ...transition, delay: 0 },
    },
  };
};

export const fadeAnimation = {
  initial: {
    opacity: 0,
    transition: { ...transition, delay: 0.5 },
  },
  animate: {
    opacity: 1,
    transition: { ...transition, delay: 0 },
  },
  exit: {
    opacity: 0,
    transition: { ...transition, delay: 0 },
  },
};

export const headTextAnimation = {
  initial: { x: 100, opacity: 0 },
  animate: { x: 0, opacity: 1 },
  transition: {
    type: "spring",
    damping: 5,
    stiffness: 40,
    restDelta: 0.001,
    duration: 0.3,
  },
};

export const headContentAnimation = {
  initial: { y: 100, opacity: 0 },
  animate: { y: 0, opacity: 1 },
  transition: {
    type: "spring",
    damping: 7,
    stiffness: 30,
    restDelta: 0.001,
    duration: 0.6,
    delay: 0.2,
    delayChildren: 0.2,
  },
};

export const headContainerAnimation = {
  initial: { x: -100, opacity: 0, transition: { ...transition, delay: 0.5 } },
  animate: { x: 0, opacity: 1, transition: { ...transition, delay: 0 } },
  exit: { x: -100, opacity: 0, transition: { ...transition, delay: 0 } },
};



src/pages/Customizer.jsx:
import React, { useState } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { useSnapshot } from "valtio";
import "./style.scss";
import state from "../store";
import { downloadCanvasToImage, reader } from "../config/helpers";
import { EditorTabs, DecalTypes, FilterTabs } from "../config/constants";
import { fadeAnimation, slideAnimation } from "../config/motion";
import downloadImg from "../assets/download.png";
import {
  ColorPicker,
  FilePicker,
  TextEditor,
  CustomButton,
  Tab,
} from "../components";


const Customizer = () => {
  const snap = useSnapshot(state);
  const [file, setFile] = useState("");

  const [activeEditorTab, setActiveEditorTab] = useState("");
  const [activeFilterTab, setActiveFilterTab] = useState({
    logoShirt: true,
    stylishShirt: false,
  });

  // Show tab content according to active tab selection
  const generateTabContent = () => {
    switch (activeEditorTab) {
      case "colorpicker":
        return <ColorPicker />;
      case "filepicker":
        return <FilePicker file={file} setFile={setFile} readFile={readFile} />;
      case "texteditor":
        return <TextEditor />;
      default:
        return null;
    }
  };

  const handleDecals = (type, result) => {
    const decalType = DecalTypes[type];
    state[decalType.stateProperty] = result;

    if (!activeFilterTab[decalType.filterTab]) {
      handleActiveFilterTab(decalType.filterTab);
    }
  };

  const handleActiveFilterTab = (tabName) => {
    switch (tabName) {
      case "logoShirt":
        state.isLogoTexture = !activeFilterTab[tabName];
        break;
      case "stylishShirt":
        state.isFullTexture = !activeFilterTab[tabName];
        break;
      default:
        state.isLogoTexture = true;
        state.isFullTexture = false;
        break;
    }

    setActiveFilterTab((prevState) => {
      return {
        ...prevState,
        [tabName]: !prevState[tabName],
      };
    });
  };

  const readFile = (type) => {
    reader(file).then((result) => {
      handleDecals(type, result);
      setActiveEditorTab("");
    });
  };

  return (
    <AnimatePresence>
      {!snap.intro && (
        <>
          <motion.div
            key="custom"
            className="customizer-btn-container absolute top-0 left-0 z-10"
            {...slideAnimation("left")}
          >
            <div className="editor-btns-container flex item-center">
              <div className="editortabs-container tabs">
                {EditorTabs.map((tab, index) => {
                  return (
                    <Tab
                      key={tab.name}
                      tab={tab}
                      handleClick={() => {
                        if (activeEditorTab === tab.name) {
                          setActiveEditorTab("");
                        } else {
                          setActiveEditorTab(tab.name);
                        }
                      }}
                    />
                  );
                })}
                {generateTabContent()}
              </div>
            </div>
          </motion.div>
          <motion.div
            className="absolute z-10 top-5 right-5"
            {...fadeAnimation}
          >
            <CustomButton
              title={"Go Back"}
              type="filled"
              handleClick={() => (state.intro = true)}
              customStyles={"w-fit px-4 py-2.5 font-bold text-sm"}
            />
          </motion.div>
          <motion.div
            className="filtertabs-container"
            {...slideAnimation("up")}
          >
            {FilterTabs.map((tab, index) => {
              return (
                <Tab
                  key={tab.name}
                  isFilterTab
                  isActiveTab={activeFilterTab[tab.name]}
                  tab={tab}
                  handleClick={() => handleActiveFilterTab(tab.name)}
                />
              );
            })}
            <Tab
              key="download-btn"
              isFilterTab
              tab={{
                name: "Download",
                icon: downloadImg,
              }}
              handleClick={() => downloadCanvasToImage()}
            />
          </motion.div>
        </>
      )}
    </AnimatePresence>
  );
};

export default Customizer;



src/pages/Home.jsx:

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useSnapshot } from "valtio";
import { TbBrandThreejs } from "react-icons/tb";
import {
  headContainerAnimation,
  headContentAnimation,
  headTextAnimation,
  slideAnimation,
} from "../config/motion";
import state from "../store";
import "./style.scss";
import { CustomButton } from "../components";

const Home = () => {
  const snap = useSnapshot(state);
  return (
    <AnimatePresence className="home-main-container">
      {snap.intro && (
        <motion.section className="home" {...slideAnimation("left")}>
          <motion.header {...slideAnimation("down")}>
            <img
              src="./threejs.png"
              alt="logo"
              className="w-8 h-8 object-contain"
            />
          </motion.header>

          <motion.div className="home-content" {...headContainerAnimation}>
            <motion.div {...headTextAnimation}>
              <h1 className="head-text">
                LET'S <br className="xl:block hidden" /> DO IT
              </h1>
            </motion.div>
            <motion.div {...headContentAnimation}>
              <p className="max-w-md font-normal text-gray-600 text-base">
                Create T-shirt Design with our 3D tool.
              </p>
              <p className="max-w-md font-normal text-gray-600 text-base">
                3D T-shirt Design tool, powered by{" "}
                <span className="threejs-text">
                   ThreeJS
                  <TbBrandThreejs className="icon"/>.
                </span>
              </p>
              <CustomButton
                type="filled"
                title="Customize It"
                handleClick={() => (state.intro = false)}
                customStyles="w-fit px-4 py-2.5 font-bold text-sm"
              />
            </motion.div>
          </motion.div>
        </motion.section>
      )}
    </AnimatePresence>
  );
};

export default Home;


src/pages/styles.scss:

.threejs-text {
  background-image: linear-gradient(to right bottom, #13dfba, #8000ca) !important;
  background-clip: text;
  font-weight: 700;
  display: flex;
  width: fit-content;
  justify-content: center;
  align-items: center;
  .icon{
    height: 100%;
    margin: 0 0 0 3px;
  }
}

.customizer-btn-container{
  position: relative;
  height: 100%;
  .editor-btns-container{
    box-shadow: 0 0 5px rgba($color: #000000, $alpha: 0.05);
    border-radius: 0 10px 10px 0;
    position: absolute;
    top: 50% !important;
    transform: translateY(-50%);
  }
}


src/store/index.js:

import { proxy } from "valtio";

const state = proxy({
  intro: true,
  color: "#EFBD48",
  isLogoTexture: true,
  isFullTexture: false,
  logoDecal: "./threejs.png",
  fullDecal: "./threejs.png",
  text: "", // New property
  fontSize: 16, // New property
  textColor: "#000000", // New property
});

export default state;



src/App.css:

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


src/App.jsx:

import Canvas from "./canvas";
import Customizer from "./pages/Customizer";
import Home from "./pages/Home";
import { Toaster } from "react-hot-toast";

function App() {
  return (
    <>
      <Toaster position="bottom-center" />
      <main className="app transition-all ease-in">
        <Home />
        <Canvas />
        <Customizer />
      </main>
    </>
  );
}

export default App;


src/main.jsx:

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)